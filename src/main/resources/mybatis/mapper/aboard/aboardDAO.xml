<?xml version="1.0" encoding="UTF-8"?>

<!-- Mapper파일을 구성하기 위한 Doctype 설정 -->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<!-- 서비스 인터페이스를 namespace로 지정한다. 컨트롤러에서 해당 인터페이스를
통해 Mapper의 메서드를 호출하게된다. -->
<mapper namespace="com.project.springboot.afbService.aboardService">
<!-- 네임스페이스로 지정된 인터페이스의 select() 메서드를 통해 해당
	엘리먼트가 실행된다. 파라미터와 결과셋 모두 MemberDTO객체를 사용하고있다. 
	select엘리먼트는 쿼리를 실행한 후 List컬렉션으로 반환한다. -->
 	<select id="selectA" 
	    resultType="com.project.springboot.aboard.aboardDTO"> 
	    select *
		  from (
		  		select rownum num, A.*
		  		  from (
		  		        select *
		  		          from a_board
		  		          <if test="searchField != null and searchField != ''">
							  where ${searchField} like '%${searchWord}%'
						  </if>
		  		         order by a_num desc
		  		          ) A
		  		  where rownum <![CDATA[<=]]> #{param1} ) B
		  where B.num <![CDATA[>=]]> #{param2}
	</select>
	 
	<!-- 페이지설정 -->
	<select id="articlePageDao" resultType="_int">
		select count(*) as total from a_board
		<if test="searchField != null and searchField != ''">
			where ${searchField} like '%${searchWord}%'
		</if>
	</select>
	
	<!-- insertA 쿼리문에서 UserDTO 클래스를 참조하여 u_id 값을 가져옴 -->
	<insert id="insertA" 
	    parameterType="com.project.springboot.aboard.aboardDTO"> 
	    INSERT INTO a_board (a_num, u_id, u_nick, a_title, a_content, a_visitcount) 
	    VALUES (seq_aboard_num.nextval, #{u_id}, #{u_nick}, #{a_title}, #{a_content}, 0)
	</insert>
	
	<!-- 공지사항 게시글 인출 -->	 
	<select id="selectOneA" 
		parameterType="com.project.springboot.aboard.aboardDTO"
		resultType="com.project.springboot.aboard.aboardDTO"> 
		select * from a_board where a_num=#{param1}
	</select>	 
	
	<!-- 공지사항 게시글 수정. 파라미터는 DTO의 멤버변수를 사용한다. -->
	<update id="updateA" 
		parameterType="com.project.springboot.aboard.aboardDTO"> 
		update a_board set a_title=#{a_title}, a_content=#{a_content} 
		where a_num=#{a_num}
	</update> 
	
	<!-- 공지사항 게시글 삭제 -->
	<delete id="deleteA" parameterType="string">
  		delete from a_board where a_num=#{a_num}
	</delete>
	
	<!-- 조회수 증가 -->
	<update id="updateVisitCount" parameterType="java.lang.String">
    UPDATE a_board SET a_visitcount=a_visitcount+1 WHERE a_num=#{a_num}
	</update>
	
	<!-- 좋아요 삽입 -->
	<insert id="insertLike" parameterType="map">
	  INSERT INTO a_board_like (a_num, u_id) VALUES (#{a_num}, #{u_id})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="deleteLike" parameterType="map">
	  DELETE FROM a_board_like WHERE a_num = #{a_num} AND u_id = #{u_id}
	</delete>
	
	<!-- 좋아요 등록 -->
	<update id="getLikeCount"  parameterType="int">
	  UPDATE a_board SET a_like = (
      SELECT COUNT(*) FROM a_board_like WHERE a_num = #{a_num}
      ) WHERE a_num = #{a_num}
	</update>

	<insert id="upload" parameterType="com.project.springboot.aboard.AupDTO">
		insert into aup (a_num, ofile, sfile)
			values (#{a_num}, #{ofile}, #{sfile})
	</insert> 
	
	<select id="uploadnum" parameterType="com.project.springboot.aboard.aboardDTO" resultType="int">
		select a_num from a_board
 			where u_id = #{u_id}
   			and rownum = 1
		order by a_num desc
	</select>
	
	<select id="uploadview" parameterType="int" resultType="com.project.springboot.aboard.AupDTO">
	    select * from aup where a_num = #{a_num, jdbcType=INTEGER}
	</select>
	
	<delete id="deleteFile">
	  DELETE FROM aup WHERE sfile = #{sfile, jdbcType=VARCHAR} AND a_num = #{a_num}
	</delete>
	
	<delete id="deleteFileAll">
	  DELETE FROM aup WHERE a_num = #{a_num}
	</delete>
	
</mapper>